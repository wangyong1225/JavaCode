1.链表是以节点的方式来储存
2.每个节点包含data域，next域，指向下一个节点
3.链表的各个节点不一定是连续存放
4.链表分带头结点的和不带头结点的，根据实际的需求来确实
head节点
1、不存放具体的数据
2、作用就是表示单链表表头

添加
1、先创建一个head头结点，作用是表示单链表的头
2、后面我们每添加一个节点，就直接加入到链表的最后
遍历：


需要按照顺序添加
1、首先找到新添加的节点的位置，通过一个辅助变量（遍历）
2、新的节点.next = temp.next
3、将temp.next=新的节点

删除（delete）和修改（update），查找（select）

反转链表
1、先定义一个节点（reverseHead=new HeroNode()）
2、从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表的最前段
3、原来的链表的head.next = reverseHead.next

双向链表和单向链表的区别
1、单向链表，查找的方向只能是一个方向，


分析双向链表的遍历，添加，修改，删除的操作思路
1、遍历的方式和单链表一样
2、添加（默认添加到双向链表的最后）
  1.先找到双向节点的最后
  2.temp.next = newHeroNode
  3.newHeroNode.pre = temp
3、修改思路和单项链表一样
4、删除
  1.temp.pre.next=temp.next
  2.temp.next.pre=temp.pre


约瑟夫问题







